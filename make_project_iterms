#!/usr/bin/env python
import sys

import AppKit
import iterm2


# Tabs to create
tabs = ["ADMIN", "TEST", "CMDLINE", "IPYTHON", "NOTEBOOK"]

# Initialize desired conda environment
conda_env = None

# Command sequences
CMDS_GENERAL = """
cd $DEVDIR
set_badge {conda_env}
conda_activate {conda_env}
"""

CMDS = {
    'ADMIN': """
pu jwst_project/{conda_env}
""",
    'TEST': """
pu jwst_project/{conda_env}
""",
    'NOTEBOOK': """
jupyter notebook --no-browser
"""
}

# Launch iTerm2 if not already running
bundle = "com.googlecode.iterm2"
if not AppKit.NSRunningApplication.runningApplicationsWithBundleIdentifier_(bundle):
    AppKit.NSWorkspace.sharedWorkspace().launchApplication_("iTerm")


async def main(connection):
    """Create a window with the given default tabs"""
    global conda_env

    app = await iterm2.async_get_app(connection)
    await app.async_activate()

    window = await iterm2.Window.async_create(connection)
    init_tab = None
    for tab_name in tabs:
        if init_tab is None:
            init_tab = window.tabs[0]
            tab = init_tab
            init_session = tab.current_session
        else:
            tab = await window.async_create_tab()
        await tab.async_set_title(tab_name)
        session = tab.current_session
        await session.async_send_text(CMDS_GENERAL.format(conda_env=conda_env))
        try:
            cmds = CMDS[tab_name]
        except KeyError:
            pass
        else:
            await session.async_send_text(cmds.format(conda_env=conda_env))

    # Make the initial session/tab active
    await init_session.async_activate(select_tab=True, order_window_front=True)


if __name__ == '__main__':
    try:
        conda_env = sys.argv[1]
    except IndexError:
        raise RuntimeError('Usage: make_project_iterms <conda_env>')
    iterm2.run_until_complete(main)
